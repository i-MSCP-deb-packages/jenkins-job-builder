- project:
    name: certbot
    repo: certbot
    distributions: !!python/tuple [jessie, stretch]
    architectures: !!python/tuple [amd64]
    branches: !!python/tuple [master]
    package:
      - python-acme:
          git-url: 'https://anonscm.debian.org/git/letsencrypt/python-acme.git'
      - python-certbot:
          git-url: 'git://anonscm.debian.org/letsencrypt/python-letsencrypt.git'
      - pyopenssl:
          git-url: 'git://anonscm.debian.org/python-modules/packages/pyopenssl.git'
      - python-cryptography:
          git-url: 'git://anonscm.debian.org/python-modules/packages/python-cryptography.git'
      - python-mock:
          git-url: 'https://github.com/oerdnj/python-mock.git'
      - ndg-httpsclient:
          git-url: 'git://anonscm.debian.org/collab-maint/ndg-httpsclient.git'
      - python-setuptools:
          git-url: 'https://github.com/oerdnj/python-setuptools.git'
      - pyasn1:
          git-url: 'https://github.com/oerdnj/pyasn1.git'
      - requests:
          git-url: 'git://anonscm.debian.org/python-modules/packages/requests.git'
      - pyrfc3339:
          git-url: 'git://anonscm.debian.org/letsencrypt/pyrfc3339.git'
      - six:
          git-url: 'git://anonscm.debian.org/collab-maint/six.git'
    jobs:
      - '{package}-source'
      - '{package}-binaries'
      - '{package}-piuparts'
      
- job-template:
    name: '{package}-source'
    project-type: matrix
    execution-strategy:
      sequential: trueaxes
    scm:
      - git:
          url: '{git-url}'
          name: origin
          refspec: +refs/heads/*:refs/remotes/origin/*
          basedir: source
          branches: '{obj:branches}'
          wipe-workspace: false
    axes:
      - axis:
          type: user-defined
          name: distribution
          values: '{obj:distributions}'
    builders:
      - shell: |
          rm -f ./* || true
      - shell: |
          export distribution=${{distribution}}
          /usr/bin/generate-git-snapshot
      - shell: |
          mkdir -p report
          /usr/bin/lintian-junit-report *.dsc > report/lintian.xml
    publishers:
      - archive:
          artifacts: '*.gz,*.bz2,*.xz,*.deb,*.dsc,*.git,*.changes,lintian.txt'
      - trigger:
          project: '{package}-binaries'
      - junit:
          results: '**/lintian.xml'
          keep-long-stdio: false
      - fingerprint:
          record-artifacts: true

- job-template:
    name: '{package}-binaries'
    project-type: matrix
    description: |
      <p>Build Debian binary packages of {package}.<br />Do not edit this job through the web, it is generated via jenkins-job-builder!</p>
      <h2>Usage instructions how to remotely access and use the repository:</h2>
      <p>Then access to this repository is available using the following sources.list entry:</p>
      <pre>
      wget -O /etc/apt/trusted.gpg.d/{repo}.gpg https://packages.sury.org/{repo}/apt.gpg
      cat << EOF > /etc/apt/sources.list.d/{repo}.list
      deb     https://packages.sury.org/{repo}/ stretch main
      deb-src https://packages.sury.org/{repo}/ stretch main
      EOF
      </pre>
    execution-strategy:
      sequential: true
    axes:
      - axis:
          type: user-defined
          name: architecture
          values: '{obj:architectures}'
      - axis:
          type: user-defined
          name: distribution
          values: '{obj:distributions}'
    builders:
      - copyartifact:
          project: '{package}-source/distribution=${{distribution}}'
          filter: '*'
          which-build: upstream-build
          fallback-to-last-successful: true
      - shell: |
          export POST_BUILD_HOOK=/usr/bin/jdg-debc
          export release=$distribution
          export RELEASE_REPOSITORY=/srv/repository/{repo}
          export RELEASE_DISTRIBUTION=$distribution
          /usr/bin/build-and-provide-package
      - shell: |
          export REPOSITORY=/srv/repository/{repo}
          echo "Listing packages inside the {repo} repository:"
          /usr/bin/repository_checker --list-repos $distribution
      - shell: |
          mkdir -p report
          /usr/bin/lintian-junit-report *.dsc > report/lintian.xml
    publishers:
      - archive:
          artifacts: '*.gz,*.bz2,*.xz,*.deb,*.dsc,*.git,*.changes,lintian.txt'
      - junit:
          results: '**/lintian.xml'
          keep-long-stdio: false
      - fingerprint:
          record-artifacts: true
      - trigger:
          project: '{package}-piuparts'
      - workspace-cleanup:
          dirmatch: false
    wrappers:
      - timestamps

- job-template:
    name: '{package}-piuparts'
    project-type: freestyle
    description: 'Installation and upgrade tests for {package} Debian packages.<br />Do not edit this job through the web, it is generated via jenkins-job-builder!'
    disabled: false
    parameters:
      - string:
          name: architecture
          default: amd64
          description: "Architecture that should be used."
      - string:
          name: distribution
          default: stretch
          description: "Distribution that should be used."
    builders:
      - copyartifact:
          project: '{package}-binaries/architecture=${{architecture}},distribution=${{distribution}}'
          filter: '*.deb'
          which-build: upstream-build
          fallback-to-last-successful: true
          flatten: true
          target: 'artifacts/'
      - shell: |
          # sadly piuparts always returns with exit code 1 :((
          sudo piuparts_wrapper ${{PWD}}/artifacts/*.deb || true
      - shell: |
          piuparts_tap piuparts.txt > piuparts.tap
    publishers:
      - tap:
          results: 'piuparts.tap'
      - archive:
          artifacts: 'piuparts.*'
      - fingerprint:
          record-artifacts: true
      - workspace-cleanup:
          dirmatch: false
    wrappers:
      - timestamps

